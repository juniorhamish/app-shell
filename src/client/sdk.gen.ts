// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type {
  GetUserInfoData,
  GetUserInfoResponse,
  GetUserInfoError,
  UpdateUserInfoData,
  UpdateUserInfoResponse,
  UpdateUserInfoError,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get details of requesting user.
 * Get details of the requesting user.
 */
export const getUserInfo = <ThrowOnError extends boolean = false>(options?: Options<GetUserInfoData, ThrowOnError>) => (options?.client ?? _heyApiClient).get<GetUserInfoResponse, GetUserInfoError, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user-info',
    ...options,
  });

/**
 * Update the details of the requesting user.
 * Update the details of the requesting user.
 */
export const updateUserInfo = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserInfoData, ThrowOnError>,
) => (options.client ?? _heyApiClient).patch<UpdateUserInfoResponse, UpdateUserInfoError, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/user-info',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
